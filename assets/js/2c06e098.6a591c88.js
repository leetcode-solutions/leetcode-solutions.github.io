(self.webpackChunkleetcode=self.webpackChunkleetcode||[]).push([[280],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return o},kt:function(){return u}});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),h=m(a),u=s,d=h["".concat(p,".").concat(u)]||h[u]||c[u]||r;return a?n.createElement(d,i(i({ref:t},o),{},{components:a})):n.createElement(d,i({ref:t},o))}));function u(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},8215:function(e,t,a){"use strict";var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,s=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:s},t)}},5064:function(e,t,a){"use strict";a.d(t,{Z:function(){return c}});var n=a(7294),s=a(9443);var r=function(){var e=(0,n.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=a(6010),l="tabItem_1uMI",p="tabItemActive_2DSg";var m=37,o=39;var c=function(e){var t=e.lazy,a=e.block,s=e.defaultValue,c=e.values,h=e.groupId,u=e.className,d=r(),k=d.tabGroupChoices,N=d.setTabGroupChoices,f=(0,n.useState)(s),v=f[0],g=f[1],b=n.Children.toArray(e.children),y=[];if(null!=h){var x=k[h];null!=x&&x!==v&&c.some((function(e){return e.value===x}))&&g(x)}var w=function(e){var t=e.currentTarget,a=y.indexOf(t),n=c[a].value;g(n),null!=h&&(N(h,n),setTimeout((function(){var e,a,n,s,r,i,l,m;(e=t.getBoundingClientRect(),a=e.top,n=e.left,s=e.bottom,r=e.right,i=window,l=i.innerHeight,m=i.innerWidth,a>=0&&r<=m&&s<=l&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(p),setTimeout((function(){return t.classList.remove(p)}),2e3))}),150))},_=function(e){var t,a;switch(e.keyCode){case o:var n=y.indexOf(e.target)+1;a=y[n]||y[0];break;case m:var s=y.indexOf(e.target)-1;a=y[s]||y[y.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},u)},c.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,i.Z)("tabs__item",l,{"tabs__item--active":v===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:_,onFocus:w,onClick:w},a)}))),t?(0,n.cloneElement)(b.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},9443:function(e,t,a){"use strict";var n=(0,a(7294).createContext)(void 0);t.Z=n},5912:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return m},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return h},default:function(){return b}});var n=a(2122),s=a(9756),r=(a(7294),a(3905)),i=a(5064),l=a(8215),p=["components"],m={slug:"../valid-parentheses",tags:["string","stack"],difficulty:"easy"},o="Valid Parentheses",c={unversionedId:"valid-parentheses/valid-parentheses",id:"valid-parentheses/valid-parentheses",isDocsHomePage:!1,title:"Valid Parentheses",description:"https://leetcode.com/problems/valid-parentheses/",source:"@site/z_lc/20-valid-parentheses/valid-parentheses.md",sourceDirName:"20-valid-parentheses",slug:"/valid-parentheses",permalink:"/valid-parentheses",editUrl:"https://github.com/leetcode-solutions/leetcode-solutions.github.io/edit/main/z_lc/20-valid-parentheses/valid-parentheses.md",version:"current",lastUpdatedAt:1625959235,formattedLastUpdatedAt:"7/10/2021",frontMatter:{slug:"../valid-parentheses",tags:["string","stack"],difficulty:"easy"},sidebar:"sidebar",previous:{title:"Remove Nth Node From End of List",permalink:"/remove-nth-node-from-end-of-list"},next:{title:"Course Schedule",permalink:"/course-schedule"}},h=[{value:"Problem",id:"problem",children:[{value:"Examples",id:"examples",children:[]},{value:"Constraints",id:"constraints",children:[]},{value:"Hints",id:"hints",children:[]}]},{value:"Solution",id:"solution",children:[]},{value:"Similar Questions",id:"similar-questions",children:[]}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},d=u("Difficulty"),k=u("Example"),N=u("Hint"),f=u("VAlign"),v=u("Similar"),g={toc:h};function b(e){var t=e.components,a=(0,s.Z)(e,p);return(0,r.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"valid-parentheses"},"Valid Parentheses"),(0,r.kt)(d,{e:!0,mdxType:"Difficulty"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-parentheses/"},"https://leetcode.com/problems/valid-parentheses/")),(0,r.kt)("h2",{id:"problem"},"Problem"),(0,r.kt)("p",null,"Given a string ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," containing just the characters ",(0,r.kt)("inlineCode",{parentName:"p"},"'('"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"')'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'{'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'}'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'['"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"']'"),", determine if the input string is valid."),(0,r.kt)("p",null,"An input string is valid if:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open brackets must be closed by the same type of brackets."),(0,r.kt)("li",{parentName:"ol"},"Open brackets must be closed in the correct order.")),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)(k,{mdxType:"Example"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"left"}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Input")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'s = "()"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Output")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")))))),(0,r.kt)("h3",{id:"constraints"},"Constraints"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null," 1 <= s.length <= 10",(0,r.kt)("sup",null,"4")," ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s")," consists of parentheses only ",(0,r.kt)("inlineCode",{parentName:"li"},"'()[]{}'"))),(0,r.kt)("h3",{id:"hints"},"Hints"),(0,r.kt)(N,{mdxType:"Hint"},(0,r.kt)("p",null,"An interesting property about a valid parentheses expression is that a sub-expression of a valid expression should also be a valid expression (Not every sub-expression) e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{ { } [ ] [ [ [ ] ] ] } is VALID expression\n          [ [ [ ] ] ]   is VALID sub-expression\n  { } [ ]               is VALID sub-expression\n")),(0,r.kt)("p",null,"Can we exploit this recursive structure somehow?")),(0,r.kt)(N,{mdxType:"Hint"},(0,r.kt)("p",null,"What if whenever we encounter a matching pair of parentheses in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{ { ( { } ) } }\n      |_|\n\n{ { (     ) } }\n    |_____|\n\n{ {         } }\n  |_________|\n\n{             }\n|_____________|\n\nVALID EXPRESSION!\n"))),(0,r.kt)(N,{mdxType:"Hint"},(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"stack")," data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively, i.e. from outside to inwards.")),(0,r.kt)("h2",{id:"solution"},"Solution"),(0,r.kt)("p",null,'Observe that for open brackets to be closed "in the correct order", this means when we encounter a closing bracket, it must match the most recently seen open bracket that has not been closed yet for the string to possibly be valid.'),(0,r.kt)("p",null,"Suppose we iterate through the string, maintaining a list of the unclosed brackets observed so far. Consider character ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"c")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))))," in the string:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"if ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"c")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))))," is an open bracket, we simply add it to the end of the list"),(0,r.kt)("li",{parentName:"ul"},"otherwise, ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"c")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))))," is a closing bracket. In this case, there are three possible cases:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if the list is empty, then we have no more unclosed brackets, but have just observed a closing bracket. Thus, the string is not valid."),(0,r.kt)("li",{parentName:"ul"},"if ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"c")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"c")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"c")))))," matches the end of the list, that pair of brackets is now matched, so remove the end of the list (as it's no longer unclosed) and continue"),(0,r.kt)("li",{parentName:"ul"},"otherwise, the string is not valid as the brackets are not closed in the correct order.")))),(0,r.kt)("p",null,'We can observe that we\'re only ever adding or removing from the end of the list - that is, this "list" is really just a stack, where the top of the stack is the next expected closing brace for the input to remain valid.'),(0,r.kt)("p",null,"We can observe that since the string only contains the parentheses, of which must be matched to be possibly valid, we can also automatically rule out any string with odd length."),(0,r.kt)("p",null,"We iterate up to the entire string a single time, and the stack contains up to half of the string's size, so both the time and space complexity of this algorithm is ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))),". "),(0,r.kt)(f,{mdxType:"VAlign"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"}),(0,r.kt)("th",{parentName:"tr",align:"left"}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Time Complexity:")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("span",{parentName:"td",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"))))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"td"},"Space Complexity:")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("span",{parentName:"td",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"O"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")")))))))))),(0,r.kt)(i.Z,{defaultValue:"Python3",groupId:"codetabs-Python3-C++17-Rust",values:[{label:"Python3",value:"Python3"},{label:"C++17",value:"C++17"},{label:"Rust",value:"Rust"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Python3",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'file="20-valid-parentheses/valid-parentheses.py"',file:'"20-valid-parentheses/valid-parentheses.py"'},"class Solution:\n    def isValid(self, s: str) -> bool:\n        if len(s) % 2 != 0:\n            return False\n        pairs = {'(': ')', '{': '}', '[': ']'}\n        stack = []\n        for c in s:\n            if c in pairs:\n                stack.append(pairs[c])\n            else:\n                if not stack or stack.pop() != c:\n                    return False\n        return not stack\n"))),(0,r.kt)(l.Z,{value:"C++17",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'file="20-valid-parentheses/valid-parentheses.cpp"',file:'"20-valid-parentheses/valid-parentheses.cpp"'},"class Solution {\npublic:\n    bool isValid(string s) {\n        #include <unordered_map>\n        \n        if (s.size() % 2 != 0) return false;\n        unordered_map<char, char> pairs ({\n            {'(', ')'},\n            {'{', '}'},\n            {'[', ']'},\n        });\n        vector<char> stack;\n        for (char c : s) {\n            if (auto it = pairs.find(c); it != pairs.end()) {\n                stack.push_back(it->second);\n            } else {\n                if (stack.empty())\n                    return false;\n                if (auto last = stack.back(); stack.pop_back(), last != c)\n                    return false;\n            }\n        }\n        return stack.empty();\n    }\n};\n"))),(0,r.kt)(l.Z,{value:"Rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:'file="20-valid-parentheses/valid-parentheses.rs"',file:'"20-valid-parentheses/valid-parentheses.rs"'},"impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        use std::collections::HashMap;\n        if s.len() % 2 != 0 { return false; }\n        let pairs: HashMap<char, char> = [\n            ('(', ')'),\n            ('{', '}'),\n            ('[', ']'),\n        ].iter().cloned().collect();\n        let mut stack: Vec<char> = vec![];\n        for c in s.chars() {\n            match c {\n                x if pairs.contains_key(&x) => stack.push(*pairs.get(&x).unwrap()),\n                _ => if stack.is_empty() || stack.pop() != Some(c) { return false; },\n            }\n        }\n        stack.is_empty()\n    }\n}\n")))),(0,r.kt)("h2",{id:"similar-questions"},"Similar Questions"),(0,r.kt)(v,{title:"Generate Parentheses",m:!0,mdxType:"Similar"}),(0,r.kt)(v,{title:"Longest Valid Parentheses",h:!0,mdxType:"Similar"}),(0,r.kt)(v,{title:"Remove Invalid Parentheses",h:!0,mdxType:"Similar"}),(0,r.kt)(v,{title:"Check if Word is Valid After Substitutions",m:!0,mdxType:"Similar"}))}b.isMDXComponent=!0},6010:function(e,t,a){"use strict";function n(e){var t,a,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(s&&(s+=" "),s+=a);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}function s(){for(var e,t,a=0,s="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(s&&(s+=" "),s+=t);return s}a.d(t,{Z:function(){return s}})}}]);